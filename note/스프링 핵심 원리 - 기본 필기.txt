###스프링 핵심 원리 - 기본편

IoC
DI
컨테이너
SOLID
SRP
OCP
DIP

등의 스프링의 속성을 이해해야한다

스프링의 핵심 가치인 객체 지향 프로그래밍을 반드시 이해해야한다

이 강의는 스프링을 왜 만들었고 어떻게 작동하는지를 알게 해준다
즉, 스프링의 본질에 깊은 이해를 가지는 것을 목표로 한다

###이야기 - 자바 진영의 추운 겨울과 스프링의 탄생

2000년대 초반의 EJB라는 기술이 있었다
//자파의 정파 무공...?

당시에 많은 기능들을 제공해줬다 일종의 스프링 빈? ORM 등의 기능을 제공해줬는데 많이 비쌌다...

선베 개발자들이 복잡하고 느리고 어려운 EJB때문에 지옥에서 타고 있었다...?

POJO Plan old Java project라는 말이 나올 정도로 EJB는 사용하기 어려웠다

EJB에 빡친 개발자 2명이 EJB를 비판하며 책을 쓰고 스프링, JPA를 개발했다

로드 존슨의 전설의 시작
책이 히트를 치자말자 유겐 휠러와 얀 카로프가 로드 존슨에게 오픈소스 프로젝트를 제안
J2EE(EJB)라는 겨울을 넘어 새로운 시작이라는 뜻으로 스프링이라고 지었다고 함

2003년 스프링 프레임워크 1.0 출시 - XML 기반으로 출시

###스프링이란??

스프링 프레임워크, 스프링 부트는 필수
스프링 데이터, 스프링 세션, 스프링 시큐리티, 스프링 rest docs, 스프링 배치, 스프링 클라우드 중에서 선택하면 된다
//1차 전직 - 2차 전직같은 느낌

스프링 프레임워크
이번 강의는 핵심 기술: 스프링 DI 컨테이너, AOP, 이벤트에 중점이 맞춰벼있다

스프링부트는 스프링을 편리하게 사용할 수 있도록 지원해주는 건데 이제는 거의 기본으로 사용한다
스프링부트는 외부 라이브러리를 자동으로 구성해준다
왠만한 건 디폴트 설정이 있어서 설정이 간결하다

스프링이라는 단어는 문맥에 따라 다르다 == 정의를 내리기 조금 애매~하다

스프링 DI 컨테이너 기술을 얘기하기도 하고 스프링 프레임워크를 얘기하기도 하고 스프링붙, 스프링 프레임워크를 포함한 전체 생태계를 의미하기도 한다

이 기술은 왜 만들어졌고 핵심 컨셉은 무엇인가??
API 사용법만 알아서는 스프링을 마ㅡ스ㅡ터할 수 없다
핵심을 알아야된다

스프링은 객체지향언어의 강력한 특징을 강화시켜주는 프레임워크다
EJB는 EJB에 의존적인 툴이라서 객체지향의 강점이 발휘될 수 없게 된다
하지만, DI 컨테이너가 객체지향을 도움으로서 개발을 돕기 떄문에 많은 개발자들이 열광했다 //객체지향을 능숙하게 다룰 수 있어야된다


###좋은 객체 지향 프로그래밍이란?

객체 지향은 객체들이 서로 분리되어 있어 한가지 수정사항에 대해 한 영역을 수정해도 사용가능하다
객체 지향 프로그래밍은 프로그램을 유연하고 변경을 용이하다 그래서 대규모 프로젝트에 많이 사용된다

운전자는 자동차의 인터페이스만 알고 있으면 된다
자동차는 K3, 아반떼, 테슬라가 계속 바껴도 상관이 없다
운전자는 차가 바뀌어도 기본적인 차의 인터페이스가 일치하면 차의 모델에 상관 없이 사용할 수 있다
자동차의 세계를 무한히 확장가능하다 == 클라이언트에 영향을 주지 않고 기능을 구현할 수 있다

로미오와 줄리엣 공연을 한다고 치면
로미오 역할과 줄리엣 역할의 역할만 수행한다면 배우는 누구던지 연극을 구현할 수 있다

이런 특성이 '유연하고 변경이 용이하다'라는 뜻이다
역할과 구현을 분리!
클라이언트는 구현 대상의 내부 구조를 알 필요가 없다
클라이언트에 전달되는 내용만 알면 된다

클라이언트는 요청, 서버는 응답한다 이것만 알면된다
객체의 협력이라는 관계!!

자바 언어의 다형성
자바에서는 오버라이딩을 통해 다형성을 실현하다
같은 메소드를 다른 식으로 사용!

멤버 서비스가 멤버 리포지토리에게
요청을 하고 멤버 레포지토리가 응답을 해준다
클라이언트-서버관계

이때 멤버 서비스는 멤버 리포지토리가 어떻게 바꿔어도 상관이 없다
정해진 인터페이스만 지킨다면 멤버 서비스는 멤버 레포지토리에게 영향을 받지 않는다
이말에는 인터페이스의 안정적인 설계의 중요성이 내포되어있다

김영한 더 스프링마스터의 생각으로는 다형성이 객체지향에서 제일 중요한다 스프링에서 제공해주는 IoC, DI는 다형성을 확장시켜주기때문에 굉장히 중요한 스프링의 핵심! 기능이다

다형성과 SOLID 이 두가지를 제대로 이해해야 스프링을 안다고 할 수 있다

###좋은 객체지향프로그램을 위한 5가지 원칙(SOLID)

클린코도 마스터 ㅡ 로 버 트 마 틴이 정리한 5가지 원칙

SRP Single Resposibility principle 단일 책임 원칙
한 클래스는 하나의 책임만 가져 한다 
하나의 클래스가 변경되었을 때 파급 효과가 적으면 단일 책임 원칙을 지킨 것이다

OCP Open/Closed Principle 개방-폐쇄 원칙
확장에는 열려있으나 변경에는 닫혀 있어야한다?
인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현하면 된다
OCP 원칙을 지키기 위해 DI 컨테이너가 존재한다!!

LSP Liskov substitution principle 리스코프 치환 원칙
하위 클래스는 인터페이스의 규약을 반드시 지켜야한다는 것
코드가 컴파일 성공해야된다는 게 아니다
구현체는 인터페이스의 목적을 반드시 수행해야된다는 것이다


ISP Interface segregation principle 인터페이스 분리 원칙
특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다
인터페이스를 세분화시켜 (쪼개버리는 것이) 수정에 유리하다

DIP Dependency inversion principle 의존관계 역전 원칙
"추상화에 의존해야지, 구체화에 의존하면 안된다" 의존성 주입!!
구현 클래스가 아닌 인터페이스에 의존하라는 뜻이다
역할에 의존해야된다는 것이다 (자동차는 굴러갈 수만 있으면 되는 거지 어떤 자동차인지는 중요하지 않다는 것이다 로미오와 줄리엣 둘 중 한명의 배우가 바껴도 서로에게 영향을 주면 안된다는 것이다)
예시에서 나온대로 구현체, 인터페이스 둘 다에 의존하는 것은 좋지않다
전적으로 인터페이스에 의존해야한다

정리: 다형성만으로는 OCP, DIP를 지킬 수 없다

###객체 지향 설계와 스프링

스프링 이야기에 객체 지향 이야기가 나오는 이유는
스프링이 DI, DI 컨테이너를 제공함으로서 다형성, OCP, DIP를 실현 가능하게 해주기 떄문이다

스프링이 없던 시절에는 OCP, DIP 원칙들을 지키는 것이 너무 힘들어서 결국에는 스프링 프레임워크가 탄생하게 된 것이다

정리: 모든 설계에 역할과 구현을 분리하자
이상적으로는 모든 설계에 인터페이스를 부여하자

실무: 인터페이스 도입은 추상화 비용이 발생한다
기능을 확장할 가능성이 없다 == 구체 클래스를 바로 사용한다
일단은 만들어 쓰고 리펙토링해서 인터페이스를 도입하는 것도 방법이다

객체지향의 사실과 오해
토비의 스프링 12
자바 ORM 표준 JPA 프로그래밍

위 3가지를 추천한다 //근데 토비의 스프링은 어렵다는데...ㅠ
추천하기로는 강의를 다 듣고 그 다음에 토비의 스프링을 정리하는 강추한다

###프로젝트 생성

스프링 설정을 해두긴 했지만?? 당장은 쓰지 않고 후에 순수 자바 코드를 이용한 코딩이 끝나면 사용할 예정이다.

백문이불여일Typing? 김영한님의 개그 센스... 멋짐이라는 게 폭발한다

###비즈니스 요구사항 설계

회원: 가입 / 조회 / 등급
상품: 주문 / 할인(변동 가능성)
DB 미확정

난처한 요구사항이 많지만 마냥 정책이 픽스될 때까지 기다릴 수 없으니 우리는 역할과 구현을 구분해서 프로젝트를 진행하자

###회원 도메인 설계

회원 도메인
가입 / 조회 /등급(일반, VIP) / 자체 DB 혹은 외부 시스템(미확정)

클라이언트 -> 회원 서비스 -> 회원 저장소(메모리, DB, 외부 시스템 3가지 방법으로 구현해준다)

회원 클래스 다이어그램
멤버 서비스<interface> -. 멤버 서비스 구현체 -> 회원 저장소(메모리 and DB)


###회원 도메인 개발

강의 도중에 코딩은 무조건 필수! 당연하지...?

등급은 일반 vip 두개
회원은 아이디 이름 등급 3개

원래는 동시성 이슈로 컨커렌트 해시맵을 쓰는데 지금은 예제니까 최대한 간단한게 쓰는 거다~~~

관례상 인터페이스에 구현체가 하나만 있다면 간단하게 ~impl 이렇게 많이 쓴다

###회원 도메인 실행과 테스트

ctrl + alt + V를 기억해라
단순한 객체 생성자를 new A()를 A a = new A()로 만들어준다

영한씨가 너무 좋다고 하십니다~

테스트 코드 작성은 개발자에게 있어 매우 중요한 능력이다

###주문과 할인 도메인 설계

1. 주문 생성
2. 회원 조회
3. 할인 적용
4. 주문 결과 반환

역할들의 협력관계를 그대로 재사용할 수 있다!!
구현체는 그래도이고 연관된 구현체가 바뀐다면 그저 우리는 갈아끼워주기만 하면 된다!

###주문과 할인 도메인 개발

f2를 누르면 오류 난 곳으로 바로 이동한다
이 단축키는 import할 때 써도 많이 유용할 듯

###주문과 할인 도메인 실행과 테스트

지금은 강의를 위해서 psvm을 사용하고 있지만 좋지 않은 방법이다 자동화된 테스트 junit 등을 이용해 테스트해주는 것이 좋다

단위테스트를 잘만드는게 정말 중요하다
단위테스트랑 스프링이나 다른 프레임워크의 도움 없이 순수 자바코드로 테스트를 하는 것!


###새로운 할인 정책 개발

수정 사항으로 인해 스프링 컨테이너의 필요성을 이해하는 것이 중요하다!!

"악덕 기획자(나쁜놈)" : 정률 %할인으로 바꾸고 싶어요 <----- 너가 바꿔

"악덕 기회작(이상함)" : 에자일로 개발하시라구요 후후 예?!?! <------ 무섭다 무서워

순진한 개발자인 우리는 객체지향 설계 원칙을 잘 준수해야만 악덕 기획자의 수정 공격으로부터 살아남을 수 있다

@DisplayName() Annotaion을 이용하자!!


###새로운 할인 정책 적용과 문제점

할인 정책을 바꾸려면 할인 정책의 클라이언트인 OrderServiceImpl 클래스의 코드를 고쳐야한다 <----- OCP 위반!!!
private final DiscountPolicy discountPolicy = new RateDiscountPolicy();

우리는 역할과 구현을 충실히 했고
다형성 활용과 인터페이스 구현 객체를 분리했지만
OCP, DIP를 준수하지 못했다 <----- ㅠㅠ

왜냐면 OrderServiceImpl이 인터페이스에만 의존하는 게 아니라 실제 구현 클래스에도 의지를 하고 있었기 때문이다!! 두둥!!!

DIP를 위반하지 않게 하려면 오직 인터페이스에만 의존하도록 변경해버리면 된다!!!
private final DiscountPolicy discountPolicy = new RateDiscountPolicy();
-> private DiscountPolicy discountPolicy;

우와 대박! 너무 간결한 코드! 하지만... NullPointerException이 나온다



###관심사의 분리

어플리케이션의 전체 동작 방식을 구성하기 위해 AppConfig를 만들어야 된다

DIP는 추상에만 의존하도록 변경해버리면 지킬 수 있다
총 관리자인 Config에서 관계를 정해주면 클라이언트 사이드에서는 본 역할에만 집중할 수 있다

AppConfig를 통해 관심사를 확실히 분리!! <----- 정말 중요!!

나중에 가서는 구현체가 바뀌더라도 클라이언트의 코드를 바꿀 필요 없이 AppConfig가 꽂아주는대로 사용하기만 하면 된다

의존관계 주입(Dependency Injection)은 정말 중요!

OrderServiceImpl의 입장에서는 어떤 구현체가 injection될지 전혀 모르는 상황이다 - 오직 외부(AppConfig)에서 결정된다
이로서 OrderService의 기능을 실행에만집중시키는데 성공!!


###AppConfig 리펙터링

AppConfig에서는 역할이 확실하게 보여야된다
클라이언트 사이드에서는 아예 변경이 없어도 어플리케이션 구축 부분 (여기서는 AppConfig)만을 변경해서 서비스 변경 사항을 적용할 줄 알아야된다


###전체 흐름 정리

...!


###좋은 객체 지향 설계의 5가지 원칙의 적용

여기서 3가지 SRP, DIP, OCP 적용

SRP 단일 책임 원칙
DIP 의존관계 연적 원칙
OCP 소프트웨어 확장 금지 원칙

DIP랑 OCP의 차이가 뭔지 감이 안오네...?

###IoC, DI, 그리고 컨테이너

전체적인 앱의흐름을 AppCofig에 주었다 = IoC 준수

프레임워크랑 라이브러리는 다르다
프레임워크는 프레임워크가 내가 작성한 코드를 제어하고
라이브러리는 낵 작성한 코드가 직접 제어를 담당한다

DI는 의존관계 주입
의존관계는 정적인 클래스 의존 관계와 실행 시점에 결정되는 동적인 객체 관계를 분리해서 생각해야 한다
정적인 의존 관계는 어플 시작 전에도 파악할 수 있다

여기서 보면 어느 언터페이스를 사용하는지는 알 수 있지만 그 인터페이스를  상속받은 어떤 구현체가 사용되는지는 어릎 시작 전에알 수 없다

ex) MemberRepository, DIscountPolicy등의 관계가 정적인 의존 관계
MemoryMemberRepository, RateDiscountPolicy가 동적인 의존 관계

IoC 컨테이너, DI 컨테이너
큰 의미는 없고 IoC, DI를 도와주는 컨테이너를 의미하는데 여기에서는 AppConfig가 DI, IoC 컨테이너이다 - 어셈블러, 오브젝트 팩토리 등으로도 불린다


###스프링으로 전환하기















